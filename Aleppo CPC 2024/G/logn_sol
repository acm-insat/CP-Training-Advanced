//بسم الله الرحمان الرحيم
//we are the winners
//we are the champions

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template<class T> using ordered_multiset = tree<T, null_type, greater_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define ll long long
#define vi vector<int>
#define vll vector<long long>
#define vvi vector<vector<int>>
#define vvll vector<vector<ll>>
#define vb vector<bool>
#define vii vector<pair<int, int>>
#define vvii vector<vector<pair<int, int>>>
#define viii vector<tuple<int, int, int>>
#define pii pair<int, int>
#define pll pair<ll, ll>
#define tiii tuple<int, int, int>
#define tll tuple<ll, ll, ll>
#define LSOne(S) ((S) & -(S))
#define fi first
#define se second
#define pb push_back
#define lv (v<<1)
#define rv ((v<<1)+1)
#define endl '\n'
#define debugv(v) for(int i=0;i<(int)v.size();i++){cout<<v[i]<<' ';}cout<<endl;
#define debugvv(v) for(int j=0;j<(int)v.size();j++){debugv(v[j])}


int ql[1001], qr[1001];
int main() {
    IOS
    // freopen("input.txt", "r", stdin);
    // freopen("output.txt", "w", stdout);

    int t;
    cin >> t;
    while (t--) {
        int n, q;
        cin >> n >> q;
        vvi l(n+1), r(n+1), qx(n+1);
        for (int i = 0; i < q; ++i) {
            int xi, li, ri;
            cin >> xi >> li >> ri;
            xi--; qx[xi].pb(i);
            l[xi].pb(li); ql[i] = li;
            r[xi].pb(ri); qr[i] = ri;
        }

        int bad = -1;
        bool good = true;
        for (int i = 0; i < n; ++i) {
            sort(l[i].begin(), l[i].end());
            sort(r[i].begin(), r[i].end());
            for (int pos = 1; pos < 1001; ++pos) {
                int nbl = upper_bound(l[i].begin(), l[i].end(), pos) - l[i].begin();
                int nbr = lower_bound(r[i].begin(), r[i].end(), pos) - r[i].begin();
                if (nbl - nbr > 1) {
                    if (bad != -1) good = false;
                    bad = i;
                    break;
                }
            }
            if (!good) break;
        }

        if (!good) {
            cout << "NO" << endl;
            continue;
        }
        if (bad == -1) {
            cout << "YES" << endl;
            continue;
        }
        for (int i : qx[bad]) {
            good = true;
            for (int pos = 1; pos < 1001; ++pos) {
                int nbl = upper_bound(l[bad].begin(), l[bad].end(), pos) - l[bad].begin();
                int nbr = lower_bound(r[bad].begin(), r[bad].end(), pos) - r[bad].begin();
                int isIn = (ql[i] <= pos && pos <= qr[i]);
                if (nbl - nbr - isIn > 1) {
                    good = false;
                    break;
                }
            }
            if (good) break;
        }
        if (good) cout << "YES" << endl;
        else cout << "NO" << endl;
    }

    return 0;
}